// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestGeneratorv1;

namespace TestGeneratorv1.Migrations
{
    [DbContext(typeof(TestGeneratorContext))]
    [Migration("20180626080711_testQuestionv1")]
    partial class testQuestionv1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TestGeneratorv1.Answer", b =>
                {
                    b.Property<int>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("AnswerPicture");

                    b.Property<string>("AnswerText");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Note");

                    b.HasKey("AnswerId");

                    b.ToTable("Answer");
                });

            modelBuilder.Entity("TestGeneratorv1.Area", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName");

                    b.Property<int?>("SubjectId");

                    b.Property<int?>("TestId");

                    b.Property<int?>("YearOfStudyId");

                    b.HasKey("AreaId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex("YearOfStudyId");

                    b.ToTable("Area");
                });

            modelBuilder.Entity("TestGeneratorv1.DifficultyLevel", b =>
                {
                    b.Property<int>("DifficultyLevelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level");

                    b.HasKey("DifficultyLevelId");

                    b.ToTable("DifficultyLevel");
                });

            modelBuilder.Entity("TestGeneratorv1.NumberOfPoints", b =>
                {
                    b.Property<int>("NumberOfPointsId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Points");

                    b.HasKey("NumberOfPointsId");

                    b.ToTable("NumberOfPoints");
                });

            modelBuilder.Entity("TestGeneratorv1.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AnswerId");

                    b.Property<int?>("AreaId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("DifficultyLevelId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Note");

                    b.Property<int?>("NumberOfPointsId");

                    b.Property<byte[]>("QuestionImage");

                    b.Property<string>("QuestionText");

                    b.Property<int?>("QuestionTypeId");

                    b.Property<int?>("StatusId");

                    b.Property<int?>("SubjectId");

                    b.Property<int?>("TestId");

                    b.Property<int?>("VisibilityId");

                    b.HasKey("QuestionId");

                    b.HasIndex("AnswerId");

                    b.HasIndex("AreaId");

                    b.HasIndex("DifficultyLevelId");

                    b.HasIndex("NumberOfPointsId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("StatusId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TestId");

                    b.HasIndex("VisibilityId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("TestGeneratorv1.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QuesstionTypeName");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionType");
                });

            modelBuilder.Entity("TestGeneratorv1.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("TestGeneratorv1.Subject", b =>
                {
                    b.Property<int>("SubjectId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SubjectName");

                    b.HasKey("SubjectId");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("TestGeneratorv1.Test", b =>
                {
                    b.Property<int>("TestId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MaxDifficultyLevelDifficultyLevelId");

                    b.Property<int>("NumberOfQuestions");

                    b.Property<int?>("SubjectId");

                    b.Property<double>("TotalDifficultyLevel");

                    b.Property<int?>("YearOfStudyId");

                    b.HasKey("TestId");

                    b.HasIndex("MaxDifficultyLevelDifficultyLevelId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("YearOfStudyId");

                    b.ToTable("Test");
                });

            modelBuilder.Entity("TestGeneratorv1.TestQuestion", b =>
                {
                    b.Property<int>("TestQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("QuestionId");

                    b.Property<int?>("TestId");

                    b.HasKey("TestQuestionId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("TestId");

                    b.ToTable("TestQuestion");
                });

            modelBuilder.Entity("TestGeneratorv1.Visibility", b =>
                {
                    b.Property<int>("VisibilityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VisibilityName");

                    b.HasKey("VisibilityId");

                    b.ToTable("Visibility");
                });

            modelBuilder.Entity("TestGeneratorv1.YearOfStudy", b =>
                {
                    b.Property<int>("YearOfStudyId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("YearOfStudyName");

                    b.HasKey("YearOfStudyId");

                    b.ToTable("YearOfStudy");
                });

            modelBuilder.Entity("TestGeneratorv1.Area", b =>
                {
                    b.HasOne("TestGeneratorv1.Subject")
                        .WithMany("Areas")
                        .HasForeignKey("SubjectId");

                    b.HasOne("TestGeneratorv1.Test")
                        .WithMany("AreasSelected")
                        .HasForeignKey("TestId");

                    b.HasOne("TestGeneratorv1.YearOfStudy", "YearOfStudy")
                        .WithMany()
                        .HasForeignKey("YearOfStudyId");
                });

            modelBuilder.Entity("TestGeneratorv1.Question", b =>
                {
                    b.HasOne("TestGeneratorv1.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId");

                    b.HasOne("TestGeneratorv1.Area", "Area")
                        .WithMany()
                        .HasForeignKey("AreaId");

                    b.HasOne("TestGeneratorv1.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyLevelId");

                    b.HasOne("TestGeneratorv1.NumberOfPoints", "NumberOfPoints")
                        .WithMany()
                        .HasForeignKey("NumberOfPointsId");

                    b.HasOne("TestGeneratorv1.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId");

                    b.HasOne("TestGeneratorv1.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("TestGeneratorv1.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("TestGeneratorv1.Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestId");

                    b.HasOne("TestGeneratorv1.Visibility", "Visibility")
                        .WithMany()
                        .HasForeignKey("VisibilityId");
                });

            modelBuilder.Entity("TestGeneratorv1.Test", b =>
                {
                    b.HasOne("TestGeneratorv1.DifficultyLevel", "MaxDifficultyLevel")
                        .WithMany()
                        .HasForeignKey("MaxDifficultyLevelDifficultyLevelId");

                    b.HasOne("TestGeneratorv1.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");

                    b.HasOne("TestGeneratorv1.YearOfStudy", "YearOfStudy")
                        .WithMany()
                        .HasForeignKey("YearOfStudyId");
                });

            modelBuilder.Entity("TestGeneratorv1.TestQuestion", b =>
                {
                    b.HasOne("TestGeneratorv1.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId");

                    b.HasOne("TestGeneratorv1.Test")
                        .WithMany("TestQuestions")
                        .HasForeignKey("TestId");
                });
#pragma warning restore 612, 618
        }
    }
}
